def GetInputs():
    in1 = CleanInputs(input('A:\n'))
    in2 = CleanInputs(input('B:\n'))
    in3 = CleanInputs(input('C:\n'))
    a = {'x':float(in1[0]), 'y':float(in1[1])}
    b = {'x':float(in2[0]), 'y':float(in2[1])}
    c = {'x':float(in3[0]), 'y':float(in3[1])}
    return (a, b, c)

def CleanInputs(inp):
    """str -> [flint, flint]"""
    inp = inp.strip('()')
    inp = inp.replace(',', ' ')
    inp = inp.replace('  ', ' ')
    inp = inp.strip()
    return inp.split(' ')

def Slope(x1, y1, x2, y2): # done
    """flint, flint, flint, flint -> float"""
    if x2-x1 == 0:
        return 0
    elif y2-y1 == 0:
        return ''
    else:
        M = (y2-y1)/(x2-x1)
        return DeciMate(M)

def AltSlope(m, x1, y1): # done
    """flint, flint, flint -> (str, str)"""
    if m == '':
        ForPrint, ForEq = f'x={x1}', f'{x1}'
    elif m == 0:
        ForPrint, ForEq = f'y={y1}', f'{y1}'
    else:
        m = m*-1
        m = m**-1 # perpendicular
        if m*x1*-1 + y1 <= 0:
            ForPrint, ForEq = f'y={DeciMate(m)}x{DeciMate(m*x1*-1+y1)}', f'{m}x{m*x1*-1+y1}'
        else:
            ForPrint, ForEq = f'y={DeciMate(m)}x+{DeciMate(m*x1*-1+y1)}', f'{m}x+{DeciMate(m*x1*-1+y1)}'
    ForPrint = Clean(ForPrint)
    ForEq = Clean(ForEq)
    return (ForPrint, ForEq)

def Orthocenter(sA, sB, sC, xA, yA, xB, yB, xC, yC, eq1, eq2):
    if sA == 'y=0.0':
        return [xB, 0]
    elif sB == 'y=0.0':
        return [xC, 0]
    elif sC == 'y=0.0':
        return [xA, 0]
    elif sA == 'x='+str(xA):
        return [xA, yB]
    elif sB == 'x='+str(xB):
        return [xB, yC]
    elif sC == 'x='+str(xC):
        return [xC, yA]
    else:
        return Solve(eq1, eq2)

def Solve(eq1, eq2):
    """str, str -> (float, float)"""
    x1M, x2M = FindM(eq1, eq2)
    x1B, x2B = FindB(eq1, eq2)
    M, Xside = OneSideX(x1M, x2M)
    B = OneSideB(x1B, x2B, Xside)
    FinalX = DeciMate(B/M)
    FinalY1 = DeciMate(PlugIn(x1M, FinalX, x1B))
    FinalY2 = DeciMate(PlugIn(x2M, FinalX, x2B))
    return (FinalX, Average(FinalY1, FinalY2))

def FindM(eq1, eq2):
    """str, str -> (float, float)"""
    x1M, x2M = eq1[0:eq1.index('x')], eq2[0:eq2.index('x')]
    if x1M == '-':
        x1M = '-1.0'
    if x2M == '-':
        x2M == '-1.0'
    if x1M == '':
        x1M = '1.0'
    if x2M == '':
        x2M == '1.0'
    return (DeciMate(float(x1M)), DeciMate(float(x2M)))

def FindB(eq1, eq2):
    """str, str -> (float, float)"""
    x1B, x2B = eq1[eq1.index('x')+1:], eq2[eq2.index('x')+1:]
    if x1B == '':
        x1B = '0.0'
    if x2B == '':
        x2B = '0.0'
    return (DeciMate(float(x1B)), DeciMate(float(x2B)))

def OneSideX(x1M, x2M):
    """flint, flint -> (float, str)"""
    if x1M > 0 and x2M > 0: #pos pos
        if x1M > x2M:
            M = DeciMate(x1M-x2M)
            MSide = 'L'
        else:
            M = DeciMate(x2M-x1M)
            MSide = 'R'
    elif x1M < 0:
        if x2M > 0: #neg pos
            M = DeciMate(x2M+x1M*-1)
            MSide = 'R'
        else: #neg neg
            if x1M < x2M:
                M = DeciMate(x1M+x2M*-1)
                MSide = 'L'
            else:
                M = DeciMate(x2M+x1M*-1)
                MSide = 'R'
    else: #pos neg
        M = DeciMate(x1M+x2M*-1)
        MSide = 'L'
    return (M, MSide)

def OneSideB(x1B, x2B, XSide):
    """flint, flint, str -> float"""
    if x1B > 0 and x2B > 0:
        if XSide == 'L': #pos pos left
            B = x2B-x1B
        else: #pos pos right
            B = x1B-x2B
    elif x1B < 0:
        if x2B > 0:
            if XSide == 'L': #neg pos left   
                B = x1B*-1+x2B
            else: #neg pos right
                B = x1B-x2B
        else:
            if XSide == 'L': #neg neg left
                B = x2B+x1B*-1
            else: #neg neg right
                B = x1B+x2B*-1
    else:
        if XSide == 'L': #pos neg left
            B = x2B-x1B
        else: # pos neg right
            B = x1B+x2B*-1
    return B

def PlugIn(M, xVal, B):
    """flint, flint, flint -> float"""
    return DeciMate(M*xVal)+B

def Average(num1, num2):
    """flint, flint -> float"""
    return DeciMate((num1+num2)/2)

def Clean(dusty):
    """str -> str"""
    dusty = dusty.replace('--', '+')
    dusty = dusty.replace('-0.0', '')
    dusty = dusty.replace('+0.0', '')
    dusty = dusty.replace('x0.0', 'x')
    dusty = dusty.replace('0.0x', '')
    return dusty

def DeciMate(num):
    """flint -> float"""
    return round(num, 3)

def Execute():
    a, b, c = GetInputs()
    AltA = AltSlope(Slope(b['x'], b['y'], c['x'], c['y']), a['x'], a['y'])
    AltB = AltSlope(Slope(a['x'], a['y'], c['x'], c['y']), b['x'], b['y'])
    AltC = AltSlope(Slope(a['x'], a['y'], b['x'], b['y']), c['x'], c['y'])
    Ortho = Orthocenter(AltA[0], AltB[0], AltC[0], a['x'], a['y'], b['x'], b['y'], c['x'], c['y'], AltA[1], AltB[1])
    return f'A({a["x"]}, {a["y"]})  B({b["x"]}, {b["y"]})  C({c["x"]}, {c["y"]})\nAltitude A: {AltA[0]}\nAltitude B: {AltB[0]}\nAltitude C: {AltC[0]}\nOrthocenter: {Ortho}'

print(Execute())
